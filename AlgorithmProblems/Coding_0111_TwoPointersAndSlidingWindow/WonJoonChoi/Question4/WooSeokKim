public static class Solution {
        public List<List<Integer>> fourSum(int[] nums, int target) {

            List<List<Integer>> results = new ArrayList<>();
            Arrays.sort(nums);
            Long sum = 0L;
            int minPoint;
            int maxPoint;

            for(int i = 0; i < nums.length - 3; i++){ //시작점 두 곳에 대해 이중반복문 만들기
                for(int j = i + 1; j < nums.length -2; j++){
                    minPoint = j + 1; //두번째 수 바로 다음 인덱스를 minPoint로 설정
                    maxPoint = nums.length - 1; //마지막 인덱스를 maxPoint로 설정
                    while(minPoint < maxPoint){
                        //이부분은 주의해야한다!
                        //각각의 수의 범위는 int 범위 내 이지만, 합은 그 범위를 넘어가는 경우가 있어서 자료형 변환 처리를 해준다.
                        sum = Long.valueOf(nums[i]) + Long.valueOf(nums[j]) + Long.valueOf(nums[minPoint]) + Long.valueOf(nums[maxPoint]);
                        if(sum < target) minPoint++; //네 수의 합이 target보다 작다면 minPoint 증가
                        else if(sum > target) maxPoint--; //target보다 크다면 maxPoint 감소
                        else if(sum == target){ //만약 같다면, 이미 results 배열에 존재하는지에 따라서 다르게 처리
                            if(results.contains(Arrays.asList(nums[i], nums[j], nums[minPoint], nums[maxPoint]))) {
                            }
                            else {
                                results.add(Arrays.asList(nums[i], nums[j], nums[minPoint], nums[maxPoint]));
                            }
                            minPoint++; //이 때 break를 하지 않는 것은, 다음 minPoint에 해당하는 숫자를 써서 또 네 수의 합이 target이 되는 경우가 있기 때문
                        }
                    }
                }
            }
            return results;
        }
    }
