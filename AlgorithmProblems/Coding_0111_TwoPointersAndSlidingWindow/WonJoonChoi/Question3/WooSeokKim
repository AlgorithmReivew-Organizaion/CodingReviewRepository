class Solution {
        public int threeSumClosest(int[] nums, int target) {
            Arrays.sort(nums); //먼저 주어진 배열을 순차로 정렬
            TreeMap<Integer, Integer> check = new TreeMap<>();
            int distance = 0;
            int minPoint = 0;
            int maxPoint = 0;

            int threeSum = 0;

            for(int i = 0; i < nums.length - 2; i++){
                minPoint = i + 1; //현재 포인터 바로 다음 인덱스를 최소 포인터로 두고
                maxPoint = nums.length - 1; //최대값이 있는 인덱스를 최대 포인터로 둔다

                while(minPoint < maxPoint){ //포인터의 위치가 서로 바뀌기 전까지 반복

                    threeSum = nums[i] + nums[minPoint] + nums[maxPoint]; //세 수의 합 구하고
                    distance = Math.abs(threeSum - target); //구하고자 하는 수와의 거리(절대값)
                    if(distance == 0) { //만약 같다면, 세수의 합을 바로 반환하고 끝냄
                        return threeSum;
                    }
                    if(threeSum < target) minPoint++; //세 수의 합이 타겟 수보다 작다면 최소포인터 증가
                    else if(threeSum > target) maxPoint--; //세 수의 합이 타겟 수보다 크다면 최대포인터 감소
                    check.put(distance, threeSum);//각 단계의 거리와 수의 합을 map에 저장
                }
            }
            //트리맵은 순서가 정해지므로, 첫번째 키로 저장된 거리가 가장 짧은 거리!
            //따라서 그 때의 value값(세 수의 합)을 반환하면 된다!
            return check.get(check.firstKey());
        }
    }
