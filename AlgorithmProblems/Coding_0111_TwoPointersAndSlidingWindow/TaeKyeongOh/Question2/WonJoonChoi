
# https://www.acmicpc.net/problem/2230
'''
1.아이디어 :
    1)입력값을 배열에 넣고 정렬. current min을 최대로 잡아 놓고,
    lp=0, rp=1로 설정 후, while lp,rp<m조건으로 반복문을 돌린다. target보다 작으면 lp+=1,크면 rp+=1한 후 current min과 비교하여 갱신한다.
2.시간복잡도 :
    1) O(nlogn) + O(n) = O(nlogn)
    - n개의 원소를 정렬 + while문
3.자료구조 :
    1)배열
'''
import sys

n, m = map(int, sys.stdin.readline().split())
nums = [int(sys.stdin.readline()) for _ in range(n)]
nums.sort()
if n==1:
    print(0)
    sys.exit()

lp, rp, cmin = 0, 1, float('inf')
while lp<n and rp<n:
    diff = nums[rp]-nums[lp]
    if diff < m:
        rp+=1
    else:
        lp+=1
        cmin = min(cmin, diff)
print(cmin)

# https://www.acmicpc.net/problem/1337

'''
1.아이디어 :
    1)들어오는 값들을 sort한 후,두개의 포인터를 두고,두 포인터 값이 4보다 작거나 같다면,그 사이의 숫자들의 갯수를 세고 current max를 갱신한다.
2.시간복잡도 :
    1) O(logn) * O(n)
    -정렬 + while문
3.자료구조 :
    1)배열
'''

import sys

input = sys.stdin.readline
nums = sorted([int(input()) for _ in range(int(input()))])
cmax = 1
lp = 0
rp = 1
while 1:
    if rp==len(nums):
        break
    if nums[rp] - nums[lp] <= 4:
        cmax = max(cmax, rp-lp+1)
        rp += 1
    else:
        lp += 1
print(5-cmax)

