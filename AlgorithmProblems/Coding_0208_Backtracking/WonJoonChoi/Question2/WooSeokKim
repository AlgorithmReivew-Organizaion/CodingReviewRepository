class Solution {
    List<List<Integer>> answer = new ArrayList<>();

        public List<List<Integer>> combinationSum(int[] candidates, int target) {

            for(int i = 0; i < candidates.length; i++){

                List<Integer> temp = new ArrayList<>();
                temp.add(candidates[i]);
                backTracking(candidates, i, 1, target - candidates[i], temp);
            }

            return answer;
        }

        public void backTracking(int[] candidates, int startIndex, int tempSize, int target, List<Integer> temp){

            if(target == 0){
                answer.add(new ArrayList<>(temp));
                return;
            }

            for(int i = startIndex; i < candidates.length; i++){
                if(candidates[i] <= target){
                    temp.add(candidates[i]);
                    backTracking(candidates, i, tempSize+1, target - candidates[i], temp);
                    temp.remove(tempSize);
                }
            }
        }
}
