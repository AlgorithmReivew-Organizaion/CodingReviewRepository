class Solution {
    public int leastInterval(char[] tasks, int n) {
        int num = tasks.length;
            HashMap<Character, Integer> map = new HashMap<>();
            int idleNum = 0;
            int standardNum = 0; //기준이 될, 가장 많은 task의 개수를 넣을 변수
            int answer = 0; // 마지막에 남은 idle 개수 + task 개수

            if(n == 0) return num; //만약 같은 작업 사이에 쉬는 시간이 필요 없다면 작업의 개수 반환하고 끝

            //해시맵에 작업의 종류와 개수를 저장한다.
            for(int i = 0; i < tasks.length; i++){
                if(map.containsKey(tasks[i])){
                   int temp = map.get(tasks[i]);
                   map.put(tasks[i], temp + 1);
                }
                else{
                    map.put(tasks[i], 1);
                }
            }

            //해시맵의 Entry셋을 가져와 값을 기준으로 정렬한다.
            //PriorityQueue를 여기서 사용하고 이후 작업에서 poll() 해도 된다.
            ArrayList<Map.Entry> arr = new ArrayList<>(map.entrySet());

            arr.sort(new Comparator<Map.Entry>() {
                @Override
                public int compare(Map.Entry o1, Map.Entry o2) {

                    return (int) o1.getValue() > (int) o2.getValue() ? -1 : 1;
                }
            });

            //기준이 되는, 가장 개수가 많은 작업의 수를 저장해둔다.
            standardNum = (int) arr.get(0).getValue();
            //기본적으로 필요한 idle 타임을 계산해준다.
            idleNum = (standardNum - 1) * n;
            
            //idle 타임에 대신 들어갈 작업들은 가장 개수많은 작업을 뺀 나머지 작업들이므로 인덱스 1부터 for문을 돌아준다.
            for(int i = 1; i < arr.size(); i++){
                //전체 idle타임 개수에서 idle 타임 대신 들어갈 수 있는 작업들의 개수를 빼준다.
                idleNum -= Math.min((int) arr.get(i).getValue(),standardNum - 1);

                //answer 변수에는 각 작업들의 개수를 더해준다.
                answer += (int) arr.get(i).getValue();
            }

            if(idleNum < 0) {
                idleNum = 0;
            } //만약 빈 공간없이 작업이 모두 들어갔다면 idleNum은 0으로 계산해준다.(음수가 될 수 없으므로)

            //answer변수에는 최종 idle타임 개수 + 처음에 더해주지 않았던 가장 개수가 많았던 작업의 개수 더해주면 끝!
            answer += standardNum + idleNum;
            
            return  answer;
    }
}
