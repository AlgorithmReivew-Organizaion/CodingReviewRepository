class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        PriorityQueue<int[]> queue = new PriorityQueue<>((o1, o2) -> o1[0] - o2[0]);
            int sp = newInterval[0];
            int ep = newInterval[1];
            int length = intervals.length;
            for (int i = 0; i < length; i++) {
                int l = intervals[i][0], r = intervals[i][1];
                if ((sp <= l && l <= ep) || (sp <= r && r <= ep)
                || ((l <= sp && sp <= r) && (l <= ep && ep <= r))){

                    sp = Math.min(sp, l);
                    ep = Math.max(ep, r);

                }
                else {
                    queue.offer(intervals[i]);
                }
            }

            queue.add(new int[] {sp, ep});
            int size = queue.size();
            int[][] result = new int[size][2];
            for (int i = 0; i < size; i++) {
                int temp[] = queue.remove();
                result[i] = temp;
            }

            return result;
    }
}
