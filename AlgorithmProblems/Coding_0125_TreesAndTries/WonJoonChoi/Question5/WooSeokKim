class Trie {

    TreeNode root = new TreeNode(' ');
        class TreeNode{

            boolean isEnd = false;
            char value;
			
						//현재 노드의 값과 다음 노드를 저장할 hashmap
            HashMap<Character, TreeNode> map = new HashMap<>();

            TreeNode(){

            }
            TreeNode(char value){
                this.value = value;
                map.put(value, null);
            }

        }

        public Trie() {
            TreeNode init = root;
        }
				
        public void insert(String word) {
            char[] values = word.toCharArray();
            TreeNode temp = root;
						//문자열을 돌면서 각 알파벳이 있는지 확인하고 있으면 다음 노드로 넘어감
						//없으면 값을 저장. 마지막 노드에는 isEnd값 변경
            for(char value : values){
                TreeNode next;
                if(temp.map.containsKey(value)){
                    next = temp.map.get(value);
                }
                else{
                    next = new TreeNode();
                    temp.map.put(value, next);
                }
                temp = next;
            }
            temp.isEnd = true;
        }
				//마찬가지로 문자열 돌면서 값이 있는지 확인하고 다 확인하는게 문제가 없었다면
				//그 알파벳이 단어의 마지막인지 여부가 답이 되므로 isEnd를 환
        public boolean search(String word) {
            char[] values = word.toCharArray();
            TreeNode temp = root;

            for(char value : values){
                if(!temp.map.containsKey(value)){
                    return false;
                }
                temp = temp.map.get(value);
            }

            return temp.isEnd;
        }
				
				//Search와 과정 비슷
        public boolean startsWith(String prefix) {

            char[] values = prefix.toCharArray();
            TreeNode temp = root;

            for(char value : values){
                if(!temp.map.containsKey(value)){
                    return false;
                }
                temp = temp.map.get(value);
            }

            return temp == null ? false : true;
        }   

}
